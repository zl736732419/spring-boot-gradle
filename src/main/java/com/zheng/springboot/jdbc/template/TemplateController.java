package com.zheng.springboot.jdbc.template;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <pre>
 *
 *  File:
 *
 *  Copyright (c) 2016, globalegrow.com All Rights Reserved.
 *
 *  Description:
 *  TODO
 *
 *  Revision History
 *  Date,					Who,					What;
 *  2019年07月12日			zhenglian			    Initial.
 *
 * </pre>
 */
@RestController
@RequestMapping("/template")
public class TemplateController {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @RequestMapping("/listUser")
    public CustomResponse listUser() {
        String sql = "SELECT * FROM INFORMATION_SCHEMA.SYSTEM_USERS";
        List<Map<String, Object>> users = new ArrayList<>();
        jdbcTemplate.query(sql, new Object[]{}, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                ResultSetMetaData metaData = rs.getMetaData();
                int count = metaData.getColumnCount();
                Map<String, Object> user = new HashMap<>();
                for (int i = 1; i <= count; i++) {
                    String columnName = metaData.getColumnName(i);
                    String columnValue = rs.getString(columnName);
                    user.put(columnName, columnValue);
                }
                users.add(user);
            }
        });
        return new CustomResponse(1, "操作成功", users);
    }
    
    @RequestMapping("/createUser/{username}/{password}")
    public CustomResponse createUser(@PathVariable("username") String username, @PathVariable("password") String password) {
        String sql = "CREATE USER \""+username+"\" PASSWORD '"+password+"' ADMIN";
        jdbcTemplate.execute(sql);
        return new CustomResponse(1, "操作成功", null);
    }
    
    @RequestMapping("/createTable")
    public CustomResponse createTable() {
        String sql = "create memory table user(id bigint GENERATED BY DEFAULT AS IDENTITY primary key, username varchar(20) not null, password varchar(20) not null)";
        jdbcTemplate.execute(sql);
        return new CustomResponse(1, "操作成功", null);
    }
    
    @RequestMapping("/save/{username}/{password}")
    public CustomResponse save(@PathVariable("username") String username, @PathVariable("password") String password) {
        jdbcTemplate.execute("insert into user(username, password) values ('"+username+"', '"+password+"')");
        return new CustomResponse(1, "操作成功", null);
    }
    
    @RequestMapping("get/{id}")
    public CustomResponse get(@PathVariable("id") Long id) {
        String sql = "select * from user where id = ?";
//        String sql = "select userentity0_.id as id, userentity0_.password as password, userentity0_.username as username from user userentity0_ where userentity0_.id=?";
        List<User> users = jdbcTemplate.query(sql, new Object[]{id}, new BeanPropertyRowMapper<>(User.class));
        return new CustomResponse(1, "操作成功", users);
    }
}
